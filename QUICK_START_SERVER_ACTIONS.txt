# ⚡ Quick Start: Invitaciones con Server Actions

## 🎯 Solución Rápida en 5 Pasos

### 1. Instalar Dependencias
```bash
cd tu-proyecto-nextjs
npm install @prisma/client resend
npm install -D prisma
```

### 2. Copiar Schema de Prisma
```bash
mkdir prisma
# Copia tu schema.prisma del backend a ./prisma/schema.prisma
npx prisma generate
```

### 3. Configurar .env.local
```bash
DATABASE_URL="tu-database-url-de-neon"
RESEND_API_KEY="tu-resend-api-key"
NEXT_PUBLIC_APP_URL="https://cresia-app.vercel.app"
```

### 4. Crear Archivos Base

#### `lib/prisma.ts`
```typescript
import { PrismaClient } from '@prisma/client'

const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined
}

export const prisma = globalForPrisma.prisma ?? new PrismaClient()

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma
```

#### `lib/resend.ts`
```typescript
import { Resend } from 'resend'
export const resend = new Resend(process.env.RESEND_API_KEY)
```

### 5. Copiar Server Action
Copia el código de `app/actions/team-invitations.ts` del archivo `FRONTEND_SERVER_ACTIONS_INVITATIONS.md`

---

## 🔥 Uso Inmediato

### Desde cualquier componente Client:
```typescript
'use client'

import { sendTeamInvitation } from '@/app/actions/team-invitations'

export function InviteButton() {
  const handleInvite = async () => {
    const result = await sendTeamInvitation({
      teamId: 'tu-team-id',
      email: 'test@example.com',
      role: 'MIEMBRO',
      byUserId: 'tu-user-id',
      expiresInDays: 7
    })
    
    if (result.success) {
      alert('✅ Invitación enviada!')
    } else {
      alert('❌ Error: ' + result.error)
    }
  }
  
  return <button onClick={handleInvite}>Enviar Invitación</button>
}
```

### Desde Server Component:
```typescript
import { sendTeamInvitation } from '@/app/actions/team-invitations'

export default async function Page() {
  const result = await sendTeamInvitation({...})
  return <div>{result.success ? '✅' : '❌'}</div>
}
```

---

## ✅ Ventajas vs Fetch

| fetch() al backend | Server Actions |
|-------------------|----------------|
| ❌ Problemas de CORS | ✅ Sin CORS |
| ❌ Validación doble | ✅ Una validación |
| ❌ Campos extra causan errores | ✅ Control total |
| ❌ Depende de Render | ✅ Independiente |
| ⚠️ 2 hops (FE → Render → DB) | ✅ 1 hop (Server → DB) |

---

## 🚀 Deploy a Vercel

1. Sube código a GitHub
2. Vercel despliega automáticamente
3. Agrega variables de entorno en Vercel Dashboard:
   - `DATABASE_URL`
   - `RESEND_API_KEY`
   - `NEXT_PUBLIC_APP_URL`

---

## 🧪 Testing Local

```bash
npm run dev
```

Abre http://localhost:3000 y prueba enviar una invitación.

---

## 📝 Checklist

- [ ] Dependencias instaladas
- [ ] Schema de Prisma copiado y generado
- [ ] Variables de entorno configuradas
- [ ] `lib/prisma.ts` creado
- [ ] `lib/resend.ts` creado
- [ ] Server action copiado a `app/actions/team-invitations.ts`
- [ ] Componente de formulario creado
- [ ] Testing local exitoso
- [ ] Variables en Vercel configuradas
- [ ] Deploy a Vercel exitoso

---

## 🎉 ¡Listo!

Ahora puedes enviar invitaciones directamente desde Next.js sin depender del backend de Render.

**Tiempo estimado:** 15-20 minutos
