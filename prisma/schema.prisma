generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum Role {
  EMPRESARIO
  ESTUDIANTE
  LIDER
  ADMIN
}

enum TeamRole {
  LIDER
  MIEMBRO
}

enum IdentityType {
  CC
  TI
  CE
  PEP
  PASAPORTE
  NIT
}

enum OnboardingStep {
  ACCOUNT
  PROFILE
  OPTIONAL
  DONE
}

model User {
  id              String          @id @default(cuid())
  name            String
  email           String          @unique
  role            Role            @default(ESTUDIANTE)
  avatarUrl       String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  skills          UserSkill[]
  teamMemberships TeamMember[]
  // Perfil ampliado (1:1)
  profile         MemberProfile?
  certifications  Certification[]
  experiences     Experience[]
  invitesSent     TeamInvite[]    @relation("InvitesByUser")
  notifications   Notification[]

  passwordHash String? @map("password_hash")

  // NUEVO: flujo por fases
  onboardingStep OnboardingStep @default(ACCOUNT)
  
  // Relación con Company (para empresarios)
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
}

model MemberProfile {
  id           String  @id @default(cuid())
  userId       String  @unique
  headline     String?
  bio          String?
  seniority    String?
  
  // UBICACIÓN MEJORADA
  country      String? // Código ISO: "CO", "US", "MX", etc.
  city         String? // Ciudad seleccionada
  address      String? // Dirección completa (opcional)
  location     String? // DEPRECATED: mantener para compatibilidad
  
  availability Int?
  stack        String?
  
  // SECTOR NORMALIZADO
  sectorId     String? // FK a tabla Sector
  sector       Sector? @relation(fields: [sectorId], references: [id])

  identityType   IdentityType?
  documentNumber String?       @unique
  phone          String?
  birthdate      DateTime?

  // Teléfono normalizado
  phoneE164    String? // +573001112233
  phoneCountry String? // ISO-3166 alpha-2: "CO", "US", etc.

  avatarUrl      String?
  avatarProvider String?
  avatarKey      String?
  avatarType     String?
  avatarSize     Int?
  avatarWidth    Int?
  avatarHeight   Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Skill {
  id        String         @id @default(cuid())
  name      String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  users     UserSkill[]
  teams     TeamSkill[]
  projects  ProjectSkill[]
}

model Sector {
  id          String          @id @default(cuid())
  name        String          @unique // slug: "technology", "finance", etc.
  nameEs      String          // Nombre en español
  nameEn      String          // Nombre en inglés
  description String?
  icon        String?         // emoji o código de ícono
  active      Boolean         @default(true)
  order       Int             @default(0)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  profiles    MemberProfile[]
  
  @@index([active, order])
}

model UserSkill {
  id      String @id @default(cuid())
  userId  String
  skillId String
  level   Int
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId])
}

model Team {
  id           String            @id @default(cuid())
  name         String
  description  String?           // descripción del equipo
  city         String?
  area         String? // ya agregado
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  members      TeamMember[]
  skills       TeamSkill[]
  assignments  TeamAssignment[]
  applications TeamApplication[]
  invites      TeamInvite[]
  connections  TeamConnection[]  // Relación con conexiones de empresarios

  @@index([city, area])
}

model TeamMember {
  id       String   @id @default(cuid())
  teamId   String
  userId   String
  role     TeamRole @default(MIEMBRO)
  joinedAt DateTime @default(now())
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model TeamSkill {
  id      String @id @default(cuid())
  teamId  String
  skillId String
  team    Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([teamId, skillId])
}

model Certification {
  id           String    @id @default(cuid())
  userId       String
  name         String
  issuer       String?
  issueDate    DateTime?
  url          String? // enlace público opcional (si el usuario quiere)
  // NUEVO (opcional)
  fileUrl      String? // URL servible (CDN / público controlado)
  fileProvider String? // "imagekit" | "s3" | "cloudinary" (texto libre al inicio)
  fileKey      String? // clave interna del proveedor (para borrar/rotar)
  fileType     String? // "image/jpeg" | "image/png" | "application/pdf"
  fileSize     Int? // bytes (para validar límites)
  fileWidth    Int? // px, solo imágenes
  fileHeight   Int? // px, solo imágenes

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Experience {
  id          String    @id @default(cuid())
  userId      String
  role        String
  company     String?
  startDate   DateTime?
  endDate     DateTime?
  description String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Company {
  id          String           @id @default(cuid())
  name        String           @unique
  sector      String?
  website     String?
  city        String?
  about       String?
  logoUrl     String?          // URL del logo de la empresa
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  projects    Project[]
  users       User[]           // Relación inversa con usuarios (empresarios)
  connections TeamConnection[] // Conexiones con equipos
}

model Project {
  id             String            @id @default(cuid())
  companyId      String
  title          String
  description    String?
  city           String?
  area           String?
  status         String            @default("OPEN") // OPEN | IN_PROGRESS | DONE | CANCELED
  budget         Decimal?
  budgetCurrency String            @default("COP") // Moneda: 'COP' o 'USD'
  startDate      DateTime?
  endDate        DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  company        Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  skills         ProjectSkill[]    // Skills del proyecto con nivel requerido
  assignments    TeamAssignment[]
  applications   TeamApplication[]
  connections    TeamConnection[]  // Conexiones de equipos a este proyecto

  @@index([companyId])
  @@index([status])
  @@index([city, area])
}

model ProjectSkill {
  id            String @id @default(cuid())
  projectId     String
  skillId       String
  levelRequired Int?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  skill   Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([projectId, skillId])
}

model TeamAssignment {
  id         String   @id @default(cuid())
  projectId  String
  teamId     String
  assignedAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  team    Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([projectId, teamId])
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

model TeamApplication {
  id        String            @id @default(cuid())
  projectId String
  teamId    String
  status    ApplicationStatus @default(PENDING)
  message   String?
  createdAt DateTime          @default(now())
  decidedAt DateTime?
  decidedBy String?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  team    Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  // Tip: si quieres evitar dos PENDING para el mismo par:
  // @@unique([projectId, teamId, status])

  @@index([projectId])
  @@index([teamId])
}

// === Enum de estado de invitaciones ===
enum InviteStatus {
  PENDING
  ACCEPTED
  CANCELED
  EXPIRED
}

enum NotificationType {
  TEAM_INVITATION       // Usuario recibe invitación a equipo
  INVITATION_ACCEPTED   // Líder: alguien aceptó su invitación
  INVITATION_REJECTED   // Líder: alguien rechazó su invitación
  TEAM_MATCH           // Líder: empresa interesada en equipo
  NEW_MEMBER           // Equipo: nuevo miembro se unió
  ROLE_CHANGE          // Usuario: cambio de rol
  REMINDER             // General: recordatorios
}

// === Modelo TeamInvite (solo fragmento relevante) ===
model TeamInvite {
  id        String       @id @default(cuid())
  teamId    String
  email     String
  role      TeamRole     @default(MIEMBRO)
  token     String       @unique
  status    InviteStatus @default(PENDING) // <-- Asegúrate de que sea ENUM, no String
  invitedBy String
  message   String?
  expiresAt DateTime?
  decidedAt DateTime?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  team          Team @relation(fields: [teamId], references: [id])
  invitedByUser User @relation("InvitesByUser", fields: [invitedBy], references: [id])
  // recomendado para evitar duplicados PENDING por email en el mismo equipo:
  // @@unique([teamId, email, status], name: "team_email_status_unique")

  @@index([teamId, email])
}

// === Sistema de Notificaciones ===
model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?            // Datos extras (teamId, inviteId, etc.)
  read      Boolean          @default(false)
  actionUrl String?          // URL para "Ver más"
  createdAt DateTime         @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, read])
  @@index([userId, createdAt])
  @@index([createdAt])
  @@map("notifications")
}

// === Sistema de Industrias y Keywords ===
model Industry {
  id           String            @id @default(cuid())
  name         String            @unique
  nameEn       String?
  description  String?
  icon         String?           // emoji o icon name
  active       Boolean           @default(true)
  displayOrder Int               @default(0)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  
  keywords     IndustryKeyword[]
  
  @@index([active])
}

model IndustryKeyword {
  id         String   @id @default(cuid())
  industryId String
  keyword    String
  language   String   @default("es")
  priority   Int      @default(1) // 1=baja, 2=media, 3=alta
  createdAt  DateTime @default(now())
  
  industry   Industry @relation(fields: [industryId], references: [id], onDelete: Cascade)
  
  @@unique([industryId, keyword, language])
  @@index([keyword])
  @@index([industryId])
  @@index([priority])
}

// === Sistema de Conexiones entre Empresarios y Equipos ===
enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model TeamConnection {
  id        String           @id @default(cuid())
  teamId    String
  projectId String
  companyId String
  message   String
  status    ConnectionStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  
  team    Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@unique([teamId, projectId]) // Evitar duplicados
  @@index([teamId])
  @@index([projectId])
  @@index([companyId])
  @@index([status])
  @@map("team_connections")
}
