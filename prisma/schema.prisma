generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  EMPRESARIO
  ESTUDIANTE
  ADMIN
}

enum TeamRole {
  LIDER
  MIEMBRO
}

model User {
  id              String        @id @default(cuid())
  name            String
  email           String        @unique
  role            Role          @default(ESTUDIANTE)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  skills          UserSkill[]
  teamMemberships TeamMember[]
  // Perfil ampliado (1:1)
  profile         MemberProfile?
  certifications  Certification[]
  experiences     Experience[]
}

model Skill {
  id        String       @id @default(cuid())
  name      String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  users     UserSkill[]
  teams     TeamSkill[]
}

model UserSkill {
  id        String   @id @default(cuid())
  userId    String
  skillId   String
  level     Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill     Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId])
}

model Team {
  id        String        @id @default(cuid())
  name      String
  city      String?
  area      String?       // ya agregado
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  members   TeamMember[]
  skills    TeamSkill[]

  @@index([city, area])
}

model TeamMember {
  id     String   @id @default(cuid())
  teamId String
  userId String
  role   TeamRole @default(MIEMBRO)
  team   Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model TeamSkill {
  id      String @id @default(cuid())
  teamId  String
  skillId String
  team    Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([teamId, skillId])
}

/* ===== Perfil ampliado ===== */
model MemberProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  headline    String?  // e.g. "Desarrollador Fullstack | React + Node"
  bio         String?
  seniority   String?  // e.g. "Junior", "Semi Senior", "Senior"
  location    String?  // ciudad/país
  availability Int?    // horas/semana disponibles
  stack       String?  // stack preferido: "React, Node, Postgres"
  sector      String?  // sector de interés: "Agro, EduTech, Salud"
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Certification {
  id        String   @id @default(cuid())
  userId    String
  name      String
  issuer    String?
  issueDate DateTime?
  url       String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Experience {
  id          String   @id @default(cuid())
  userId      String
  role        String
  company     String?
  startDate   DateTime?
  endDate     DateTime?
  description String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
